== Comment ajouter, voir et &eacuteliminer des objets de type Sequence d'une base de donn&eacute;es BioSQL? ==

BioJava contient des classes utilitaires qui donne l'aspect d'une instance SequenceDB &agrave; n'importe quel base de donn&eacute;s respectant la sch&eacute;ma BioSQL. La classe qui vous utiliserait probablement le plus est ''BioSQLSequenceDB''. ''BioSQLSequenceDB'' est une instance d&eacute;riv&eacute;e de ''SequenceDB'' et s'utilise exactement de la m&ecirc;me mani&egrave;re. L'heureuse cons&eacute;quence de cet &eacute;tat de fait est que ceci rends inutile l'utilisation de commandes SQL ou la connaissance du sc&eacute;ma BioSQL. Toute op&eacute;ration faite sur l'objet ''BioSSQLSequenceDB'' se r&eacute;percute de fait dans la base de donn&eacute;es BioSQL qui se trouve derri&egrave; cette classe.

L'exemple suivant montre la technique &agrave; utiliser afin de se brancher &agrave; une base de donn&eacute;es BioSQL, comment y ajouter une s&eacute;quence, comme faire une recherche sur la base de donn&eacute;es et comment &eacute;liminer cette s&eacute;quence de la base de donn&eacute;es.

<pre>
import org.biojava.bio.BioException; 
import org.biojava.bio.seq.DNATools; 
import org.biojava.bio.seq.Sequence; 
import org.biojava.bio.seq.db.biosql.BioSQLSequenceDB; 
import org.biojava.utils.ChangeVetoException; 
import org.biojava.bio.seq.io.SeqIOTools; 
import java.io.*; 


/** 
 * Test d'une simple connection a une BioSQLSequenceDB 
 * aveec ecriture/lecture/rature d'une Sequence 
 */ 

public class Connect { 
  public static void main(String[] args) {
    
    //le format de l'url dependra du pilote JDBC utilise
    String dbURL = "jdbc:oracle:thin:@mydbserver:1521:biosql"; 
    String dbUser = "username"; 
    String dbPass = "secret_password";
    
    //branchons nous a une biodatabase appellee test
    String biodatabase = "test";
    //ou bien nous en creons une
    boolean createIfMissing = true; 

    try {
      //charger le pilote JDBC
      Class.forName("oracle.jdbc.driver.OracleDriver"); 
    } 
    catch (ClassNotFoundException ex) { 
      System.out.println("Cannot find DB driver, is it on your classpath?"); 
    } 
    try {
      
      //creer une connection
      BioSQLSequenceDB db = new BioSQLSequenceDB(dbURL, 
                                                 dbUser, 
                                                 dbPass, 
                                                 biodatabase, 
                                                 createIfMissing); 
      
      Sequence seq = DNATools.createDNASequence("acgtggccttagacg","test_seq1"); 
      System.out.println("Creating sequence of type "+seq.getAlphabet().getName()); 
      try { 
        System.out.println("adding a sequence"); 
        db.addSequence(seq); 
        seq = null; 
      } 
      catch (ChangeVetoException ex) { 
        System.err.println("Cannot add Sequence, is the DB locked?"); 
        System.exit(1); 
      } 

      System.out.println("retrieving test_seq1"); 
      seq = db.getSequence("test_seq1"); 
      try { 
        SeqIOTools.writeFasta(System.out, seq); 
      } 
      catch (IOException ex) { 
        ex.printStackTrace(); 
      } 

      try { 
        //eliminer l'inscription a la bd
        //impossible a moins qu' aucune reference n'existe pour cette sequence 
        seq = null;
        System.out.println("deleting test_seq1");
        db.removeSequence("test_seq1"); 
      } 
      catch (ChangeVetoException ex) { 
        System.err.println("Cannot remove test_seq1, is the DB locked?"); 
      } 
    } 
    catch (BioException ex) { 
      ex.printStackTrace(); 
      System.exit(1); 
    } 
  } 
}
</pre>