== How do I make a CrossProductAlphabet such as a codon Alphabet ==

CrossProductAlphabets result from the multiplication of other [http://www.biojava.org/docs/api14/org/biojava/bio/symbol/Alphabet.html Alphabets]. CrossProductAlphabets are used to wrap up 2 or more [http://www.biojava.org/docs/api14/org/biojava/bio/symbol/Symbol.html Symbols]into a single "cross product" [http://www.biojava.org/docs/api14/org/biojava/bio/symbol/Symbol.html Symbol]. For example using a 3 way cross of the [[wp:DNA|DNA]] alphabet you could wrap a [[wp:codon|codon]] as a [http://www.biojava.org/docs/api14/org/biojava/bio/symbol/Symbol.html Symbol]. You could then count those [[wp:codon|codon]] [http://www.biojava.org/docs/api14/org/biojava/bio/symbol/Symbol.html Symbols] in a [http://www.biojava.org/docs/api14/org/biojava/bio/dist/Count.html Count] or you could used them in a http://www.biojava.org/docs/api14/org/biojava/bio/dist/Distribution.html Distribution].

CrossProductAlphabets can be created by name (if the component [http://www.biojava.org/docs/api14/org/biojava/bio/symbol/Alphabet.html Alphabets] are registered in the [http://www.biojava.org/docs/api14/org/biojava/bio/symbol/AlphabetManager.html AlphabetManager]) or by making a list of the desired [http://www.biojava.org/docs/api14/org/biojava/bio/symbol/Alphabet.html Alphabets] and creating the [http://www.biojava.org/docs/api14/org/biojava/bio/symbol/Alphabet.html Alphabet] from the List. Both approaches are shown in the example below.

<pre>
import java.util.*;
import org.biojava.bio.seq.*;
import org.biojava.bio.symbol.*;

public class CrossProduct {
  public static void main(String[] args) {

    //make a CrossProductAlphabet from a List
    List l = Collections.nCopies(3, DNATools.getDNA());
    Alphabet codon = AlphabetManager.getCrossProductAlphabet(l);

    //get the same Alphabet by name
    Alphabet codon2 =
        AlphabetManager.generateCrossProductAlphaFromName("(DNA x DNA x DNA)");

    //show that the two Alphabets are canonical
    System.out.println(codon == codon2);
  }
}
</pre>