When doing the analysis of code from Biojava 1 and emphasis was placed on breaking the code into modules. Thus core represent a collection of classes that would be common to other modules. The common elements for all modules is reading, writing and representation of sequence data. We have also placed an emphasis of modeling in Java the biological relationships between sequences as accurately as possible. In the genomic view of sequence data we now have very large data sets where it isn't unreasonable to expect that if you load a protein sequence with an accession id that you should be able to use the api to retrieve the gene sequence that codes for that protein sequence. Once you have the gene sequence you should easily extract intron sequences or sequence data flanking the gene sequence for analysis. By leveraging the REST or Web Services of public data sources like Uniprot or NCBI we want the api to hide these implementation details but offer enough flexibility that other public or prive data sources can be easily integrated into BioJava3. 

The core sequence classes
*DNASequence
**ChromosomeSequence
**GeneSequence
**IntronSequence
**ExonSequence
**TranscriptSequence
*RNASequence
*ProteinSequence